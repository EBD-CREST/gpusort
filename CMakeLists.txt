CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

###########################################################
# Eg: cmake ../ -D MPI_ROOT_DIR=/path/to/mpi/ -D CUDA_TOOLKIT_ROOT_DIR=/path/to/cuda/ -D CUDA_ARCH_ID=37
#############################################################
PROJECT(gpusort)
# Make lib tool
SET(AR ar)
SET(AR_FLAGS  -r -s )

# Copy tool
SET(CP cp)
SET(CP_FLAGS "")

# Remove temp file tool
SET(RM mv)
SET(RM_FLAGS -f)

# OpenMPI path variables

SET(MPI_CXX_INC ${MPI_ROOT_DIR}/include)
SET(MPI_CXX_LIB ${MPI_ROOT_DIR}/lib)
SET(MPI_CXX_COMPILER ${MPI_ROOT_DIR}/bin/mpicxx)

# 
# Specify version of CUDA by
#
SET(CUDA_ARCH_ID 37 CACHE STRING 37)

# Sources file
FILE(GLOB MPI_CC ${CMAKE_SOURCE_DIR}/src/*.cc)
FILE(GLOB CUDA_CU ${CMAKE_SOURCE_DIR}/src/*.cu)
FILE(GLOB TEST_CC ${CMAKE_SOURCE_DIR}/src/test/*cc)
LIST(REMOVE_ITEM TEST_CC *thrust*)

# Options
OPTION(DO_BENCHMARK "...." ON) 
OPTION(DEBUG_MSG "...." ON) 
OPTION(USE_CPP_11 "...." OFF) 
OPTION(USE_CPP_0X "...." ON) 

SET(DO_BENCHMARK_OPTION "")
SET(CUDA_COMPILER_OPTION "-D__CUDA_COMPILER")
SET(DEBUG_MSG_OPTION "")
SET(USE_CPP_VERSION_OPTION "")

IF(USE_CPP_11)
    SET(USE_CPP_VERSION_OPTION  -std=c++11 -D__USING_CPP_11 )
ELSEIF(USE_CPP_0X)
    SET(USE_CPP_VERSION_OPTION  -std=c++0x -D__USING_CPP_0X )
ENDIF(USE_CPP_11)

IF(DO_BENCHMARK)
    SET(DO_BENCHMARK_OPTION "-D__DO_BENCHMARK")
ENDIF(DO_BENCHMARK)

IF(DEBUG_MSG)
    SET(DEBUG_MSG_OPTION "-D__DEBUG_MSG")
ENDIF(DEBUG_MSG)


# Variables
SET(CUDA_LIB "cuda")
SET(MPI_LIB "mpi")
SET(CMAKESFILES_DIR ${CMAKE_BINARY_DIR}/CMakeFiles)
SET(TARGET_STATIC_LIB "lib${PROJECT_NAME}.a")
SET(TARGET_LIBRARY_DIR "${CMAKE_BINARY_DIR}/lib")
SET(TARGET_INCLUDE_DIR "${CMAKE_BINARY_DIR}/include")
SET(TARGET_BINARY_DIR "${CMAKE_BINARY_DIR}/bin")
SET(INCLUDE_DIR "${CMAKE_SOURCE_DIR}/include")
SET(CMAKES_CUDA_FLAGS  -arch=compute_${CUDA_ARCH_ID} -code=sm_${CUDA_ARCH_ID} -lcudart -lcudadevrt )

# Make directory bin, lib
FILE(MAKE_DIRECTORY ${TARGET_BINARY_DIR})
FILE(MAKE_DIRECTORY ${TARGET_LIBRARY_DIR})

# 
# Build cuda source code
#
FIND_PACKAGE(CUDA REQUIRED)
INCLUDE(FindCUDA)
INCLUDE_DIRECTORIES(${CUDA_SDK_INC_DIR} ${INCLUDE_DIR} ${MPI_CXX_INC})
#SET(CUDA_NVCC_FLAGS " -rdc=true -O3 -g  ${DO_BENCHMARK_OPTION} ${CUDA_COMPILER_OPTION} ${DEBUG_MSG_OPTION} ${CMAKES_CUDA_FLAGS} ")
SET(CUDA_NVCC_FLAGS -rdc=true -O3 -g  ${DO_BENCHMARK_OPTION} ${CUDA_COMPILER_OPTION} ${DEBUG_MSG_OPTION} ${CMAKES_CUDA_FLAGS})
CUDA_ADD_LIBRARY(${CUDA_LIB} ${CUDA_CU})

#
# Specify mpicxx compiler
# cmake -D CMAKE_CXX_COMPILER=/path/to/mpicxx
#

# Build mpi source code
SET(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
SET(CMAKES_MPI_FLAGS  -O3 -lgomp -fopenmp ${USE_CPP_VERSION_OPTION} ${CUDA_COMPILER_OPTION} ${DO_BENCHMARK_OPTION} )
STRING (REPLACE ";" " " CMAKE_MPI_FLAGS_STR "${CMAKES_MPI_FLAGS}")
SET(CMAKE_CXX_FLAGS ${CMAKE_MPI_FLAGS_STR})

INCLUDE(FindMPI)
ADD_LIBRARY(${MPI_LIB} ${MPI_CC})
 
#
# Create library to lib folder
#
SET(CUDA_TEMP_OBJ cuda_temp.o)
SET(CUDA_LIB_OBJ_DIR ${CMAKESFILES_DIR}/${CUDA_LIB}.dir/src)
SET(MPI_LIB_OBJ_DIR ${CMAKESFILES_DIR}/${MPI_LIB}.dir/src)

# Custom command to link & create static library
ADD_CUSTOM_COMMAND(
    TARGET ${MPI_LIB} POST_BUILD 
    #COMMAND ${CMAKE_COMMAND} -E  make_directory ${TARGET_LIBRARY_DIR}
    COMMAND ${CUDA_NVCC_EXECUTABLE}  ${CMAKES_CUDA_FLAGS} -dlink ${CUDA_LIB_OBJ_DIR}/*.cu.o -o ${CUDA_LIB_OBJ_DIR}/${CUDA_TEMP_OBJ}
    COMMAND ${AR} ${AR_FLAGS} ${TARGET_LIBRARY_DIR}/${TARGET_STATIC_LIB} ${MPI_LIB_OBJ_DIR}/*.o ${CUDA_LIB_OBJ_DIR}/*.o 
    COMMAND ${CP} -r ${INCLUDE_DIR} ${CMAKE_BINARY_DIR}
    COMMAND ${RM} ${RM_FLAGS} ${CMAKE_BINARY_DIR}/*.a
)
#
# Install to ${prefix}/lib
#
#INSTALL(DIRECTORY ${TARGET_LIBRARY_DIR} DESTINATION .)
INSTALL(DIRECTORY ${TARGET_INCLUDE_DIR} ${TARGET_LIBRARY_DIR} DESTINATION gpusort)
#
# Build examples
#
STRING(REGEX REPLACE "libcudart.so" "" CUDA_LIB64_DIR ${CUDA_CUDART_LIBRARY} ) 
SET (BUILD_EXAMPLES_FLAGS -O3 -lgomp -fopenmp ${USE_CPP_VERSION_OPTION} ${DO_BENCHMARK_OPTION}  -l${PROJECT_NAME} -L${TARGET_LIBRARY_DIR} -L${CUDA_LIB64_DIR} -lcudart -lcudadevrt )

FOREACH(SRC_CC ${TEST_CC})
   
   STRING(REPLACE ".cc" "" EX_PATH_NAME ${SRC_CC} )
   STRING(REPLACE "${CMAKE_SOURCE_DIR}/src/test/" "" EX_NAME ${EX_PATH_NAME} )
   IF("${SRC_CC}" MATCHES "(.*)thrust(.*)")
       CONTINUE()
   ENDIF()

   SET(A_CMD_STR "${CMAKE_CXX_COMPILER};-I${TARGET_INCLUDE_DIR};-I${MPI_CXX_INC};${SRC_CC};-o;${TARGET_BINARY_DIR}/${EX_NAME};-I${CUDA_TOOLKIT_INCLUDE};${BUILD_EXAMPLES_FLAGS};\;") 

   LIST(APPEND BUILD_EX_CMDS "${A_CMD_STR}")

ENDFOREACH(SRC_CC)

ADD_CUSTOM_TARGET(
    samples
   # COMMAND ${CMAKE_COMMAND} -E  make_directory ${TARGET_BINARY_DIR}
    COMMAND sh -c \"${BUILD_EX_CMDS}\"
)

#
# Build thrust example
#

#
# set PATH of thrust file
#
SET(EXAMPLE_APP_NAME test_thrust_host_vector)
SET(OBJECT1 ${TARGET_BINARY_DIR}/${CUDA_TEMP_OBJ})
SET(OBJECT2 ${TARGET_BINARY_DIR}/${EXAMPLE_APP_NAME}.o)
SET(EXECUTABLE ${TARGET_BINARY_DIR}/${EXAMPLE_APP_NAME})


FILE(GLOB THRUST_CC ${CMAKE_SOURCE_DIR}/src/test/${EXAMPLE_APP_NAME}.cc)
FILE(GLOB THRUST_CU ${CMAKE_SOURCE_DIR}/src/test/${EXAMPLE_APP_NAME}.cu)

SET(BIN_PATH ${CMAKE_SOURCE_DIR}/bin/test)

ADD_CUSTOM_TARGET(
    sample_thrust
#    COMMAND ${CMAKE_COMMAND} -E  make_directory ${TARGET_BINARY_DIR}
    COMMAND ${CUDA_NVCC_EXECUTABLE} -c ${CUDA_NVCC_FLAGS} -I${INCLUDE_DIR} -I=${MPI_CXX_INC} ${THRUST_CU} -o ${OBJECT1}
    COMMAND ${CUDA_NVCC_EXECUTABLE} -dlink ${CMAKES_CUDA_FLAGS} ${OBJECT1} -o ${OBJECT2}

    COMMAND ${MPI_CXX_COMPILER} -I${INCLUDE_DIR} ${THRUST_CC} ${OBJECT1} ${OBJECT2} -o ${EXECUTABLE} ${BUILD_EXAMPLES_FLAGS}
    COMMAND ${RM} ${RM_FLAGS} ${OBJECT1} ${OBJECT2}
)

ADD_DEPENDENCIES(samples sample_thrust)
